"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@notionhq";
exports.ids = ["vendor-chunks/@notionhq"];
exports.modules = {

/***/ "(rsc)/./node_modules/@notionhq/client/build/src/Client.js":
/*!***********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/Client.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Client_auth, _Client_logLevel, _Client_logger, _Client_prefixUrl, _Client_timeoutMs, _Client_notionVersion, _Client_fetch, _Client_agent, _Client_userAgent;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@notionhq/client/build/src/logging.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@notionhq/client/build/src/errors.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@notionhq/client/build/src/utils.js\");\nconst api_endpoints_1 = __webpack_require__(/*! ./api-endpoints */ \"(rsc)/./node_modules/@notionhq/client/build/src/api-endpoints.js\");\nconst node_fetch_1 = __webpack_require__(/*! node-fetch */ \"(rsc)/./node_modules/node-fetch/lib/index.mjs\");\nconst package_json_1 = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/@notionhq/client/build/package.json\");\nclass Client {\n    constructor(options){\n        var _a, _b, _c, _d, _e, _f;\n        _Client_auth.set(this, void 0);\n        _Client_logLevel.set(this, void 0);\n        _Client_logger.set(this, void 0);\n        _Client_prefixUrl.set(this, void 0);\n        _Client_timeoutMs.set(this, void 0);\n        _Client_notionVersion.set(this, void 0);\n        _Client_fetch.set(this, void 0);\n        _Client_agent.set(this, void 0);\n        _Client_userAgent.set(this, void 0);\n        /*\n         * Notion API endpoints\n         */ this.blocks = {\n            /**\n             * Retrieve block\n             */ retrieve: (args)=>{\n                return this.request({\n                    path: api_endpoints_1.getBlock.path(args),\n                    method: api_endpoints_1.getBlock.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.getBlock.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.getBlock.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth\n                });\n            },\n            /**\n             * Update block\n             */ update: (args)=>{\n                return this.request({\n                    path: api_endpoints_1.updateBlock.path(args),\n                    method: api_endpoints_1.updateBlock.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.updateBlock.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.updateBlock.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth\n                });\n            },\n            /**\n             * Delete block\n             */ delete: (args)=>{\n                return this.request({\n                    path: api_endpoints_1.deleteBlock.path(args),\n                    method: api_endpoints_1.deleteBlock.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.deleteBlock.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.deleteBlock.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth\n                });\n            },\n            children: {\n                /**\n                 * Append block children\n                 */ append: (args)=>{\n                    return this.request({\n                        path: api_endpoints_1.appendBlockChildren.path(args),\n                        method: api_endpoints_1.appendBlockChildren.method,\n                        query: (0, utils_1.pick)(args, api_endpoints_1.appendBlockChildren.queryParams),\n                        body: (0, utils_1.pick)(args, api_endpoints_1.appendBlockChildren.bodyParams),\n                        auth: args === null || args === void 0 ? void 0 : args.auth\n                    });\n                },\n                /**\n                 * Retrieve block children\n                 */ list: (args)=>{\n                    return this.request({\n                        path: api_endpoints_1.listBlockChildren.path(args),\n                        method: api_endpoints_1.listBlockChildren.method,\n                        query: (0, utils_1.pick)(args, api_endpoints_1.listBlockChildren.queryParams),\n                        body: (0, utils_1.pick)(args, api_endpoints_1.listBlockChildren.bodyParams),\n                        auth: args === null || args === void 0 ? void 0 : args.auth\n                    });\n                }\n            }\n        };\n        this.databases = {\n            /**\n             * List databases\n             *\n             * @deprecated Please use `search`\n             */ list: (args)=>{\n                return this.request({\n                    path: api_endpoints_1.listDatabases.path(),\n                    method: api_endpoints_1.listDatabases.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.listDatabases.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.listDatabases.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth\n                });\n            },\n            /**\n             * Retrieve a database\n             */ retrieve: (args)=>{\n                return this.request({\n                    path: api_endpoints_1.getDatabase.path(args),\n                    method: api_endpoints_1.getDatabase.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.getDatabase.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.getDatabase.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth\n                });\n            },\n            /**\n             * Query a database\n             */ query: (args)=>{\n                return this.request({\n                    path: api_endpoints_1.queryDatabase.path(args),\n                    method: api_endpoints_1.queryDatabase.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.queryDatabase.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.queryDatabase.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth\n                });\n            },\n            /**\n             * Create a database\n             */ create: (args)=>{\n                return this.request({\n                    path: api_endpoints_1.createDatabase.path(),\n                    method: api_endpoints_1.createDatabase.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.createDatabase.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.createDatabase.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth\n                });\n            },\n            /**\n             * Update a database\n             */ update: (args)=>{\n                return this.request({\n                    path: api_endpoints_1.updateDatabase.path(args),\n                    method: api_endpoints_1.updateDatabase.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.updateDatabase.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.updateDatabase.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth\n                });\n            }\n        };\n        this.pages = {\n            /**\n             * Create a page\n             */ create: (args)=>{\n                return this.request({\n                    path: api_endpoints_1.createPage.path(),\n                    method: api_endpoints_1.createPage.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.createPage.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.createPage.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth\n                });\n            },\n            /**\n             * Retrieve a page\n             */ retrieve: (args)=>{\n                return this.request({\n                    path: api_endpoints_1.getPage.path(args),\n                    method: api_endpoints_1.getPage.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.getPage.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.getPage.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth\n                });\n            },\n            /**\n             * Update page properties\n             */ update: (args)=>{\n                return this.request({\n                    path: api_endpoints_1.updatePage.path(args),\n                    method: api_endpoints_1.updatePage.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.updatePage.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.updatePage.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth\n                });\n            },\n            properties: {\n                /**\n                 * Retrieve page property\n                 */ retrieve: (args)=>{\n                    return this.request({\n                        path: api_endpoints_1.getPageProperty.path(args),\n                        method: api_endpoints_1.getPageProperty.method,\n                        query: (0, utils_1.pick)(args, api_endpoints_1.getPageProperty.queryParams),\n                        body: (0, utils_1.pick)(args, api_endpoints_1.getPageProperty.bodyParams),\n                        auth: args === null || args === void 0 ? void 0 : args.auth\n                    });\n                }\n            }\n        };\n        this.users = {\n            /**\n             * Retrieve a user\n             */ retrieve: (args)=>{\n                return this.request({\n                    path: api_endpoints_1.getUser.path(args),\n                    method: api_endpoints_1.getUser.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.getUser.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.getUser.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth\n                });\n            },\n            /**\n             * List all users\n             */ list: (args)=>{\n                return this.request({\n                    path: api_endpoints_1.listUsers.path(),\n                    method: api_endpoints_1.listUsers.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.listUsers.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.listUsers.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth\n                });\n            },\n            /**\n             * Get details about bot\n             */ me: (args)=>{\n                return this.request({\n                    path: api_endpoints_1.getSelf.path(),\n                    method: api_endpoints_1.getSelf.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.getSelf.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.getSelf.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth\n                });\n            }\n        };\n        this.comments = {\n            /**\n             * Create a comment\n             */ create: (args)=>{\n                return this.request({\n                    path: api_endpoints_1.createComment.path(),\n                    method: api_endpoints_1.createComment.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.createComment.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.createComment.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth\n                });\n            },\n            /**\n             * List comments\n             */ list: (args)=>{\n                return this.request({\n                    path: api_endpoints_1.listComments.path(),\n                    method: api_endpoints_1.listComments.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.listComments.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.listComments.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth\n                });\n            }\n        };\n        /**\n         * Search\n         */ this.search = (args)=>{\n            return this.request({\n                path: api_endpoints_1.search.path(),\n                method: api_endpoints_1.search.method,\n                query: (0, utils_1.pick)(args, api_endpoints_1.search.queryParams),\n                body: (0, utils_1.pick)(args, api_endpoints_1.search.bodyParams),\n                auth: args === null || args === void 0 ? void 0 : args.auth\n            });\n        };\n        this.oauth = {\n            /**\n             * Get token\n             */ token: (args)=>{\n                return this.request({\n                    path: api_endpoints_1.oauthToken.path(),\n                    method: api_endpoints_1.oauthToken.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.oauthToken.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.oauthToken.bodyParams),\n                    auth: {\n                        client_id: args.client_id,\n                        client_secret: args.client_secret\n                    }\n                });\n            }\n        };\n        __classPrivateFieldSet(this, _Client_auth, options === null || options === void 0 ? void 0 : options.auth, \"f\");\n        __classPrivateFieldSet(this, _Client_logLevel, (_a = options === null || options === void 0 ? void 0 : options.logLevel) !== null && _a !== void 0 ? _a : logging_1.LogLevel.WARN, \"f\");\n        __classPrivateFieldSet(this, _Client_logger, (_b = options === null || options === void 0 ? void 0 : options.logger) !== null && _b !== void 0 ? _b : (0, logging_1.makeConsoleLogger)(package_json_1.name), \"f\");\n        __classPrivateFieldSet(this, _Client_prefixUrl, ((_c = options === null || options === void 0 ? void 0 : options.baseUrl) !== null && _c !== void 0 ? _c : \"https://api.notion.com\") + \"/v1/\", \"f\");\n        __classPrivateFieldSet(this, _Client_timeoutMs, (_d = options === null || options === void 0 ? void 0 : options.timeoutMs) !== null && _d !== void 0 ? _d : 60000, \"f\");\n        __classPrivateFieldSet(this, _Client_notionVersion, (_e = options === null || options === void 0 ? void 0 : options.notionVersion) !== null && _e !== void 0 ? _e : Client.defaultNotionVersion, \"f\");\n        __classPrivateFieldSet(this, _Client_fetch, (_f = options === null || options === void 0 ? void 0 : options.fetch) !== null && _f !== void 0 ? _f : node_fetch_1.default, \"f\");\n        __classPrivateFieldSet(this, _Client_agent, options === null || options === void 0 ? void 0 : options.agent, \"f\");\n        __classPrivateFieldSet(this, _Client_userAgent, `notionhq-client/${package_json_1.version}`, \"f\");\n    }\n    /**\n     * Sends a request.\n     *\n     * @param path\n     * @param method\n     * @param query\n     * @param body\n     * @returns\n     */ async request({ path, method, query, body, auth }) {\n        this.log(logging_1.LogLevel.INFO, \"request start\", {\n            method,\n            path\n        });\n        // If the body is empty, don't send the body in the HTTP request\n        const bodyAsJsonString = !body || Object.entries(body).length === 0 ? undefined : JSON.stringify(body);\n        const url = new URL(`${__classPrivateFieldGet(this, _Client_prefixUrl, \"f\")}${path}`);\n        if (query) {\n            for (const [key, value] of Object.entries(query)){\n                if (value !== undefined) {\n                    if (Array.isArray(value)) {\n                        value.forEach((val)=>url.searchParams.append(key, decodeURIComponent(val)));\n                    } else {\n                        url.searchParams.append(key, String(value));\n                    }\n                }\n            }\n        }\n        // Allow both client ID / client secret based auth as well as token based auth.\n        let authorizationHeader;\n        if (typeof auth === \"object\") {\n            // Client ID and secret based auth is **ONLY** supported when using the\n            // `/oauth/token` endpoint. If this is the case, handle formatting the\n            // authorization header as required by `Basic` auth.\n            const unencodedCredential = `${auth.client_id}:${auth.client_secret}`;\n            const encodedCredential = Buffer.from(unencodedCredential).toString(\"base64\");\n            authorizationHeader = {\n                authorization: `Basic ${encodedCredential}`\n            };\n        } else {\n            // Otherwise format authorization header as `Bearer` token auth.\n            authorizationHeader = this.authAsHeaders(auth);\n        }\n        const headers = {\n            ...authorizationHeader,\n            \"Notion-Version\": __classPrivateFieldGet(this, _Client_notionVersion, \"f\"),\n            \"user-agent\": __classPrivateFieldGet(this, _Client_userAgent, \"f\")\n        };\n        if (bodyAsJsonString !== undefined) {\n            headers[\"content-type\"] = \"application/json\";\n        }\n        try {\n            const response = await errors_1.RequestTimeoutError.rejectAfterTimeout(__classPrivateFieldGet(this, _Client_fetch, \"f\").call(this, url.toString(), {\n                method: method.toUpperCase(),\n                headers,\n                body: bodyAsJsonString,\n                agent: __classPrivateFieldGet(this, _Client_agent, \"f\")\n            }), __classPrivateFieldGet(this, _Client_timeoutMs, \"f\"));\n            const responseText = await response.text();\n            if (!response.ok) {\n                throw (0, errors_1.buildRequestError)(response, responseText);\n            }\n            const responseJson = JSON.parse(responseText);\n            this.log(logging_1.LogLevel.INFO, `request success`, {\n                method,\n                path\n            });\n            return responseJson;\n        } catch (error) {\n            if (!(0, errors_1.isNotionClientError)(error)) {\n                throw error;\n            }\n            // Log the error if it's one of our known error types\n            this.log(logging_1.LogLevel.WARN, `request fail`, {\n                code: error.code,\n                message: error.message\n            });\n            if ((0, errors_1.isHTTPResponseError)(error)) {\n                // The response body may contain sensitive information so it is logged separately at the DEBUG level\n                this.log(logging_1.LogLevel.DEBUG, `failed response body`, {\n                    body: error.body\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Emits a log message to the console.\n     *\n     * @param level The level for this message\n     * @param args Arguments to send to the console\n     */ log(level, message, extraInfo) {\n        if ((0, logging_1.logLevelSeverity)(level) >= (0, logging_1.logLevelSeverity)(__classPrivateFieldGet(this, _Client_logLevel, \"f\"))) {\n            __classPrivateFieldGet(this, _Client_logger, \"f\").call(this, level, message, extraInfo);\n        }\n    }\n    /**\n     * Transforms an API key or access token into a headers object suitable for an HTTP request.\n     *\n     * This method uses the instance's value as the default when the input is undefined. If neither are defined, it returns\n     * an empty object\n     *\n     * @param auth API key or access token\n     * @returns headers key-value object\n     */ authAsHeaders(auth) {\n        const headers = {};\n        const authHeaderValue = auth !== null && auth !== void 0 ? auth : __classPrivateFieldGet(this, _Client_auth, \"f\");\n        if (authHeaderValue !== undefined) {\n            headers[\"authorization\"] = `Bearer ${authHeaderValue}`;\n        }\n        return headers;\n    }\n}\nexports[\"default\"] = Client;\n_Client_auth = new WeakMap(), _Client_logLevel = new WeakMap(), _Client_logger = new WeakMap(), _Client_prefixUrl = new WeakMap(), _Client_timeoutMs = new WeakMap(), _Client_notionVersion = new WeakMap(), _Client_fetch = new WeakMap(), _Client_agent = new WeakMap(), _Client_userAgent = new WeakMap();\nClient.defaultNotionVersion = \"2022-06-28\"; //# sourceMappingURL=Client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@notionhq/client/build/src/Client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@notionhq/client/build/src/api-endpoints.js":
/*!******************************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/api-endpoints.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// cspell:disable-file\n// Note: This is a generated file.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.oauthToken = exports.listComments = exports.createComment = exports.search = exports.createDatabase = exports.listDatabases = exports.queryDatabase = exports.updateDatabase = exports.getDatabase = exports.appendBlockChildren = exports.listBlockChildren = exports.deleteBlock = exports.updateBlock = exports.getBlock = exports.getPageProperty = exports.updatePage = exports.getPage = exports.createPage = exports.listUsers = exports.getUser = exports.getSelf = void 0;\nexports.getSelf = {\n    method: \"get\",\n    pathParams: [],\n    queryParams: [],\n    bodyParams: [],\n    path: ()=>`users/me`\n};\nexports.getUser = {\n    method: \"get\",\n    pathParams: [\n        \"user_id\"\n    ],\n    queryParams: [],\n    bodyParams: [],\n    path: (p)=>`users/${p.user_id}`\n};\nexports.listUsers = {\n    method: \"get\",\n    pathParams: [],\n    queryParams: [\n        \"start_cursor\",\n        \"page_size\"\n    ],\n    bodyParams: [],\n    path: ()=>`users`\n};\nexports.createPage = {\n    method: \"post\",\n    pathParams: [],\n    queryParams: [],\n    bodyParams: [\n        \"parent\",\n        \"properties\",\n        \"icon\",\n        \"cover\",\n        \"content\",\n        \"children\"\n    ],\n    path: ()=>`pages`\n};\nexports.getPage = {\n    method: \"get\",\n    pathParams: [\n        \"page_id\"\n    ],\n    queryParams: [\n        \"filter_properties\"\n    ],\n    bodyParams: [],\n    path: (p)=>`pages/${p.page_id}`\n};\nexports.updatePage = {\n    method: \"patch\",\n    pathParams: [\n        \"page_id\"\n    ],\n    queryParams: [],\n    bodyParams: [\n        \"properties\",\n        \"icon\",\n        \"cover\",\n        \"archived\",\n        \"in_trash\"\n    ],\n    path: (p)=>`pages/${p.page_id}`\n};\nexports.getPageProperty = {\n    method: \"get\",\n    pathParams: [\n        \"page_id\",\n        \"property_id\"\n    ],\n    queryParams: [\n        \"start_cursor\",\n        \"page_size\"\n    ],\n    bodyParams: [],\n    path: (p)=>`pages/${p.page_id}/properties/${p.property_id}`\n};\nexports.getBlock = {\n    method: \"get\",\n    pathParams: [\n        \"block_id\"\n    ],\n    queryParams: [],\n    bodyParams: [],\n    path: (p)=>`blocks/${p.block_id}`\n};\nexports.updateBlock = {\n    method: \"patch\",\n    pathParams: [\n        \"block_id\"\n    ],\n    queryParams: [],\n    bodyParams: [\n        \"embed\",\n        \"type\",\n        \"archived\",\n        \"in_trash\",\n        \"bookmark\",\n        \"image\",\n        \"video\",\n        \"pdf\",\n        \"file\",\n        \"audio\",\n        \"code\",\n        \"equation\",\n        \"divider\",\n        \"breadcrumb\",\n        \"table_of_contents\",\n        \"link_to_page\",\n        \"table_row\",\n        \"heading_1\",\n        \"heading_2\",\n        \"heading_3\",\n        \"paragraph\",\n        \"bulleted_list_item\",\n        \"numbered_list_item\",\n        \"quote\",\n        \"to_do\",\n        \"toggle\",\n        \"template\",\n        \"callout\",\n        \"synced_block\",\n        \"table\"\n    ],\n    path: (p)=>`blocks/${p.block_id}`\n};\nexports.deleteBlock = {\n    method: \"delete\",\n    pathParams: [\n        \"block_id\"\n    ],\n    queryParams: [],\n    bodyParams: [],\n    path: (p)=>`blocks/${p.block_id}`\n};\nexports.listBlockChildren = {\n    method: \"get\",\n    pathParams: [\n        \"block_id\"\n    ],\n    queryParams: [\n        \"start_cursor\",\n        \"page_size\"\n    ],\n    bodyParams: [],\n    path: (p)=>`blocks/${p.block_id}/children`\n};\nexports.appendBlockChildren = {\n    method: \"patch\",\n    pathParams: [\n        \"block_id\"\n    ],\n    queryParams: [],\n    bodyParams: [\n        \"children\",\n        \"after\"\n    ],\n    path: (p)=>`blocks/${p.block_id}/children`\n};\nexports.getDatabase = {\n    method: \"get\",\n    pathParams: [\n        \"database_id\"\n    ],\n    queryParams: [],\n    bodyParams: [],\n    path: (p)=>`databases/${p.database_id}`\n};\nexports.updateDatabase = {\n    method: \"patch\",\n    pathParams: [\n        \"database_id\"\n    ],\n    queryParams: [],\n    bodyParams: [\n        \"title\",\n        \"description\",\n        \"icon\",\n        \"cover\",\n        \"properties\",\n        \"is_inline\",\n        \"archived\",\n        \"in_trash\"\n    ],\n    path: (p)=>`databases/${p.database_id}`\n};\nexports.queryDatabase = {\n    method: \"post\",\n    pathParams: [\n        \"database_id\"\n    ],\n    queryParams: [\n        \"filter_properties\"\n    ],\n    bodyParams: [\n        \"sorts\",\n        \"filter\",\n        \"start_cursor\",\n        \"page_size\",\n        \"archived\",\n        \"in_trash\"\n    ],\n    path: (p)=>`databases/${p.database_id}/query`\n};\nexports.listDatabases = {\n    method: \"get\",\n    pathParams: [],\n    queryParams: [\n        \"start_cursor\",\n        \"page_size\"\n    ],\n    bodyParams: [],\n    path: ()=>`databases`\n};\nexports.createDatabase = {\n    method: \"post\",\n    pathParams: [],\n    queryParams: [],\n    bodyParams: [\n        \"parent\",\n        \"properties\",\n        \"icon\",\n        \"cover\",\n        \"title\",\n        \"description\",\n        \"is_inline\"\n    ],\n    path: ()=>`databases`\n};\nexports.search = {\n    method: \"post\",\n    pathParams: [],\n    queryParams: [],\n    bodyParams: [\n        \"sort\",\n        \"query\",\n        \"start_cursor\",\n        \"page_size\",\n        \"filter\"\n    ],\n    path: ()=>`search`\n};\nexports.createComment = {\n    method: \"post\",\n    pathParams: [],\n    queryParams: [],\n    bodyParams: [\n        \"parent\",\n        \"rich_text\",\n        \"discussion_id\"\n    ],\n    path: ()=>`comments`\n};\nexports.listComments = {\n    method: \"get\",\n    pathParams: [],\n    queryParams: [\n        \"block_id\",\n        \"start_cursor\",\n        \"page_size\"\n    ],\n    bodyParams: [],\n    path: ()=>`comments`\n};\nexports.oauthToken = {\n    method: \"post\",\n    pathParams: [],\n    queryParams: [],\n    bodyParams: [\n        \"grant_type\",\n        \"code\",\n        \"redirect_uri\",\n        \"external_account\"\n    ],\n    path: ()=>`oauth/token`\n}; //# sourceMappingURL=api-endpoints.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@notionhq/client/build/src/api-endpoints.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@notionhq/client/build/src/errors.js":
/*!***********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/errors.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.buildRequestError = exports.APIResponseError = exports.UnknownHTTPResponseError = exports.isHTTPResponseError = exports.RequestTimeoutError = exports.isNotionClientError = exports.ClientErrorCode = exports.APIErrorCode = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@notionhq/client/build/src/utils.js\");\n/**\n * Error codes returned in responses from the API.\n */ var APIErrorCode;\n(function(APIErrorCode) {\n    APIErrorCode[\"Unauthorized\"] = \"unauthorized\";\n    APIErrorCode[\"RestrictedResource\"] = \"restricted_resource\";\n    APIErrorCode[\"ObjectNotFound\"] = \"object_not_found\";\n    APIErrorCode[\"RateLimited\"] = \"rate_limited\";\n    APIErrorCode[\"InvalidJSON\"] = \"invalid_json\";\n    APIErrorCode[\"InvalidRequestURL\"] = \"invalid_request_url\";\n    APIErrorCode[\"InvalidRequest\"] = \"invalid_request\";\n    APIErrorCode[\"ValidationError\"] = \"validation_error\";\n    APIErrorCode[\"ConflictError\"] = \"conflict_error\";\n    APIErrorCode[\"InternalServerError\"] = \"internal_server_error\";\n    APIErrorCode[\"ServiceUnavailable\"] = \"service_unavailable\";\n})(APIErrorCode = exports.APIErrorCode || (exports.APIErrorCode = {}));\n/**\n * Error codes generated for client errors.\n */ var ClientErrorCode;\n(function(ClientErrorCode) {\n    ClientErrorCode[\"RequestTimeout\"] = \"notionhq_client_request_timeout\";\n    ClientErrorCode[\"ResponseError\"] = \"notionhq_client_response_error\";\n})(ClientErrorCode = exports.ClientErrorCode || (exports.ClientErrorCode = {}));\n/**\n * Base error type.\n */ class NotionClientErrorBase extends Error {\n}\n/**\n * @param error any value, usually a caught error.\n * @returns `true` if error is a `NotionClientError`.\n */ function isNotionClientError(error) {\n    return (0, utils_1.isObject)(error) && error instanceof NotionClientErrorBase;\n}\nexports.isNotionClientError = isNotionClientError;\n/**\n * Narrows down the types of a NotionClientError.\n * @param error any value, usually a caught error.\n * @param codes an object mapping from possible error codes to `true`\n * @returns `true` if error is a `NotionClientError` with a code in `codes`.\n */ function isNotionClientErrorWithCode(error, codes) {\n    return isNotionClientError(error) && error.code in codes;\n}\n/**\n * Error thrown by the client if a request times out.\n */ class RequestTimeoutError extends NotionClientErrorBase {\n    constructor(message = \"Request to Notion API has timed out\"){\n        super(message);\n        this.code = ClientErrorCode.RequestTimeout;\n        this.name = \"RequestTimeoutError\";\n    }\n    static isRequestTimeoutError(error) {\n        return isNotionClientErrorWithCode(error, {\n            [ClientErrorCode.RequestTimeout]: true\n        });\n    }\n    static rejectAfterTimeout(promise, timeoutMS) {\n        return new Promise((resolve, reject)=>{\n            const timeoutId = setTimeout(()=>{\n                reject(new RequestTimeoutError());\n            }, timeoutMS);\n            promise.then(resolve).catch(reject).then(()=>clearTimeout(timeoutId));\n        });\n    }\n}\nexports.RequestTimeoutError = RequestTimeoutError;\nclass HTTPResponseError extends NotionClientErrorBase {\n    constructor(args){\n        super(args.message);\n        this.name = \"HTTPResponseError\";\n        const { code, status, headers, rawBodyText } = args;\n        this.code = code;\n        this.status = status;\n        this.headers = headers;\n        this.body = rawBodyText;\n    }\n}\nconst httpResponseErrorCodes = {\n    [ClientErrorCode.ResponseError]: true,\n    [APIErrorCode.Unauthorized]: true,\n    [APIErrorCode.RestrictedResource]: true,\n    [APIErrorCode.ObjectNotFound]: true,\n    [APIErrorCode.RateLimited]: true,\n    [APIErrorCode.InvalidJSON]: true,\n    [APIErrorCode.InvalidRequestURL]: true,\n    [APIErrorCode.InvalidRequest]: true,\n    [APIErrorCode.ValidationError]: true,\n    [APIErrorCode.ConflictError]: true,\n    [APIErrorCode.InternalServerError]: true,\n    [APIErrorCode.ServiceUnavailable]: true\n};\nfunction isHTTPResponseError(error) {\n    if (!isNotionClientErrorWithCode(error, httpResponseErrorCodes)) {\n        return false;\n    }\n    return true;\n}\nexports.isHTTPResponseError = isHTTPResponseError;\n/**\n * Error thrown if an API call responds with an unknown error code, or does not respond with\n * a property-formatted error.\n */ class UnknownHTTPResponseError extends HTTPResponseError {\n    constructor(args){\n        var _a;\n        super({\n            ...args,\n            code: ClientErrorCode.ResponseError,\n            message: (_a = args.message) !== null && _a !== void 0 ? _a : `Request to Notion API failed with status: ${args.status}`\n        });\n        this.name = \"UnknownHTTPResponseError\";\n    }\n    static isUnknownHTTPResponseError(error) {\n        return isNotionClientErrorWithCode(error, {\n            [ClientErrorCode.ResponseError]: true\n        });\n    }\n}\nexports.UnknownHTTPResponseError = UnknownHTTPResponseError;\nconst apiErrorCodes = {\n    [APIErrorCode.Unauthorized]: true,\n    [APIErrorCode.RestrictedResource]: true,\n    [APIErrorCode.ObjectNotFound]: true,\n    [APIErrorCode.RateLimited]: true,\n    [APIErrorCode.InvalidJSON]: true,\n    [APIErrorCode.InvalidRequestURL]: true,\n    [APIErrorCode.InvalidRequest]: true,\n    [APIErrorCode.ValidationError]: true,\n    [APIErrorCode.ConflictError]: true,\n    [APIErrorCode.InternalServerError]: true,\n    [APIErrorCode.ServiceUnavailable]: true\n};\n/**\n * A response from the API indicating a problem.\n * Use the `code` property to handle various kinds of errors. All its possible values are in `APIErrorCode`.\n */ class APIResponseError extends HTTPResponseError {\n    constructor(){\n        super(...arguments);\n        this.name = \"APIResponseError\";\n    }\n    static isAPIResponseError(error) {\n        return isNotionClientErrorWithCode(error, apiErrorCodes);\n    }\n}\nexports.APIResponseError = APIResponseError;\nfunction buildRequestError(response, bodyText) {\n    const apiErrorResponseBody = parseAPIErrorResponseBody(bodyText);\n    if (apiErrorResponseBody !== undefined) {\n        return new APIResponseError({\n            code: apiErrorResponseBody.code,\n            message: apiErrorResponseBody.message,\n            headers: response.headers,\n            status: response.status,\n            rawBodyText: bodyText\n        });\n    }\n    return new UnknownHTTPResponseError({\n        message: undefined,\n        headers: response.headers,\n        status: response.status,\n        rawBodyText: bodyText\n    });\n}\nexports.buildRequestError = buildRequestError;\nfunction parseAPIErrorResponseBody(body) {\n    if (typeof body !== \"string\") {\n        return;\n    }\n    let parsed;\n    try {\n        parsed = JSON.parse(body);\n    } catch (parseError) {\n        return;\n    }\n    if (!(0, utils_1.isObject)(parsed) || typeof parsed[\"message\"] !== \"string\" || !isAPIErrorCode(parsed[\"code\"])) {\n        return;\n    }\n    return {\n        ...parsed,\n        code: parsed[\"code\"],\n        message: parsed[\"message\"]\n    };\n}\nfunction isAPIErrorCode(code) {\n    return typeof code === \"string\" && code in apiErrorCodes;\n} //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@notionhq/client/build/src/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@notionhq/client/build/src/helpers.js":
/*!************************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/helpers.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isMentionRichTextItemResponse = exports.isEquationRichTextItemResponse = exports.isTextRichTextItemResponse = exports.isFullComment = exports.isFullUser = exports.isFullPageOrDatabase = exports.isFullDatabase = exports.isFullPage = exports.isFullBlock = exports.collectPaginatedAPI = exports.iteratePaginatedAPI = void 0;\n/**\n * Returns an async iterator over the results of any paginated Notion API.\n *\n * Example (given a notion Client called `notion`):\n *\n * ```\n * for await (const block of iteratePaginatedAPI(notion.blocks.children.list, {\n *   block_id: parentBlockId,\n * })) {\n *   // Do something with block.\n * }\n * ```\n *\n * @param listFn A bound function on the Notion client that represents a conforming paginated\n *   API. Example: `notion.blocks.children.list`.\n * @param firstPageArgs Arguments that should be passed to the API on the first and subsequent\n *   calls to the API. Any necessary `next_cursor` will be automatically populated by\n *   this function. Example: `{ block_id: \"<my block id>\" }`\n */ async function* iteratePaginatedAPI(listFn, firstPageArgs) {\n    let nextCursor = firstPageArgs.start_cursor;\n    do {\n        const response = await listFn({\n            ...firstPageArgs,\n            start_cursor: nextCursor\n        });\n        yield* response.results;\n        nextCursor = response.next_cursor;\n    }while (nextCursor);\n}\nexports.iteratePaginatedAPI = iteratePaginatedAPI;\n/**\n * Collect all of the results of paginating an API into an in-memory array.\n *\n * Example (given a notion Client called `notion`):\n *\n * ```\n * const blocks = await collectPaginatedAPI(notion.blocks.children.list, {\n *   block_id: parentBlockId,\n * })\n * // Do something with blocks.\n * ```\n *\n * @param listFn A bound function on the Notion client that represents a conforming paginated\n *   API. Example: `notion.blocks.children.list`.\n * @param firstPageArgs Arguments that should be passed to the API on the first and subsequent\n *   calls to the API. Any necessary `next_cursor` will be automatically populated by\n *   this function. Example: `{ block_id: \"<my block id>\" }`\n */ async function collectPaginatedAPI(listFn, firstPageArgs) {\n    const results = [];\n    for await (const item of iteratePaginatedAPI(listFn, firstPageArgs)){\n        results.push(item);\n    }\n    return results;\n}\nexports.collectPaginatedAPI = collectPaginatedAPI;\n/**\n * @returns `true` if `response` is a full `BlockObjectResponse`.\n */ function isFullBlock(response) {\n    return response.object === \"block\" && \"type\" in response;\n}\nexports.isFullBlock = isFullBlock;\n/**\n * @returns `true` if `response` is a full `PageObjectResponse`.\n */ function isFullPage(response) {\n    return response.object === \"page\" && \"url\" in response;\n}\nexports.isFullPage = isFullPage;\n/**\n * @returns `true` if `response` is a full `DatabaseObjectResponse`.\n */ function isFullDatabase(response) {\n    return response.object === \"database\" && \"title\" in response;\n}\nexports.isFullDatabase = isFullDatabase;\n/**\n * @returns `true` if `response` is a full `DatabaseObjectResponse` or a full\n * `PageObjectResponse`.\n */ function isFullPageOrDatabase(response) {\n    if (response.object === \"database\") {\n        return isFullDatabase(response);\n    } else {\n        return isFullPage(response);\n    }\n}\nexports.isFullPageOrDatabase = isFullPageOrDatabase;\n/**\n * @returns `true` if `response` is a full `UserObjectResponse`.\n */ function isFullUser(response) {\n    return \"type\" in response;\n}\nexports.isFullUser = isFullUser;\n/**\n * @returns `true` if `response` is a full `CommentObjectResponse`.\n */ function isFullComment(response) {\n    return \"created_by\" in response;\n}\nexports.isFullComment = isFullComment;\n/**\n * @returns `true` if `richText` is a `TextRichTextItemResponse`.\n */ function isTextRichTextItemResponse(richText) {\n    return richText.type === \"text\";\n}\nexports.isTextRichTextItemResponse = isTextRichTextItemResponse;\n/**\n * @returns `true` if `richText` is an `EquationRichTextItemResponse`.\n */ function isEquationRichTextItemResponse(richText) {\n    return richText.type === \"equation\";\n}\nexports.isEquationRichTextItemResponse = isEquationRichTextItemResponse;\n/**\n * @returns `true` if `richText` is an `MentionRichTextItemResponse`.\n */ function isMentionRichTextItemResponse(richText) {\n    return richText.type === \"mention\";\n}\nexports.isMentionRichTextItemResponse = isMentionRichTextItemResponse; //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@notionhq/client/build/src/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@notionhq/client/build/src/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isFullPageOrDatabase = exports.isFullComment = exports.isFullUser = exports.isFullPage = exports.isFullDatabase = exports.isFullBlock = exports.iteratePaginatedAPI = exports.collectPaginatedAPI = exports.isNotionClientError = exports.RequestTimeoutError = exports.UnknownHTTPResponseError = exports.APIResponseError = exports.ClientErrorCode = exports.APIErrorCode = exports.LogLevel = exports.Client = void 0;\nvar Client_1 = __webpack_require__(/*! ./Client */ \"(rsc)/./node_modules/@notionhq/client/build/src/Client.js\");\nObject.defineProperty(exports, \"Client\", ({\n    enumerable: true,\n    get: function() {\n        return Client_1.default;\n    }\n}));\nvar logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@notionhq/client/build/src/logging.js\");\nObject.defineProperty(exports, \"LogLevel\", ({\n    enumerable: true,\n    get: function() {\n        return logging_1.LogLevel;\n    }\n}));\nvar errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@notionhq/client/build/src/errors.js\");\nObject.defineProperty(exports, \"APIErrorCode\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.APIErrorCode;\n    }\n}));\nObject.defineProperty(exports, \"ClientErrorCode\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.ClientErrorCode;\n    }\n}));\nObject.defineProperty(exports, \"APIResponseError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.APIResponseError;\n    }\n}));\nObject.defineProperty(exports, \"UnknownHTTPResponseError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.UnknownHTTPResponseError;\n    }\n}));\nObject.defineProperty(exports, \"RequestTimeoutError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.RequestTimeoutError;\n    }\n}));\n// Error helpers\nObject.defineProperty(exports, \"isNotionClientError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.isNotionClientError;\n    }\n}));\nvar helpers_1 = __webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/@notionhq/client/build/src/helpers.js\");\nObject.defineProperty(exports, \"collectPaginatedAPI\", ({\n    enumerable: true,\n    get: function() {\n        return helpers_1.collectPaginatedAPI;\n    }\n}));\nObject.defineProperty(exports, \"iteratePaginatedAPI\", ({\n    enumerable: true,\n    get: function() {\n        return helpers_1.iteratePaginatedAPI;\n    }\n}));\nObject.defineProperty(exports, \"isFullBlock\", ({\n    enumerable: true,\n    get: function() {\n        return helpers_1.isFullBlock;\n    }\n}));\nObject.defineProperty(exports, \"isFullDatabase\", ({\n    enumerable: true,\n    get: function() {\n        return helpers_1.isFullDatabase;\n    }\n}));\nObject.defineProperty(exports, \"isFullPage\", ({\n    enumerable: true,\n    get: function() {\n        return helpers_1.isFullPage;\n    }\n}));\nObject.defineProperty(exports, \"isFullUser\", ({\n    enumerable: true,\n    get: function() {\n        return helpers_1.isFullUser;\n    }\n}));\nObject.defineProperty(exports, \"isFullComment\", ({\n    enumerable: true,\n    get: function() {\n        return helpers_1.isFullComment;\n    }\n}));\nObject.defineProperty(exports, \"isFullPageOrDatabase\", ({\n    enumerable: true,\n    get: function() {\n        return helpers_1.isFullPageOrDatabase;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5vdGlvbmhxL2NsaWVudC9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDRCQUE0QixHQUFHQSxxQkFBcUIsR0FBR0Esa0JBQWtCLEdBQUdBLGtCQUFrQixHQUFHQSxzQkFBc0IsR0FBR0EsbUJBQW1CLEdBQUdBLDJCQUEyQixHQUFHQSwyQkFBMkIsR0FBR0EsMkJBQTJCLEdBQUdBLDJCQUEyQixHQUFHQSxnQ0FBZ0MsR0FBR0Esd0JBQXdCLEdBQUdBLHVCQUF1QixHQUFHQSxvQkFBb0IsR0FBR0EsZ0JBQWdCLEdBQUdBLGNBQWMsR0FBRyxLQUFLO0FBQ2hhLElBQUlrQixXQUFXQyxtQkFBT0EsQ0FBQywyRUFBVTtBQUNqQ3JCLDBDQUF5QztJQUFFc0IsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsU0FBU0ksT0FBTztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzdHLElBQUlDLFlBQVlKLG1CQUFPQSxDQUFDLDZFQUFXO0FBQ25DckIsNENBQTJDO0lBQUVzQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxVQUFVUCxRQUFRO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDakgsSUFBSVEsV0FBV0wsbUJBQU9BLENBQUMsMkVBQVU7QUFDakNyQixnREFBK0M7SUFBRXNCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9HLFNBQVNULFlBQVk7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN4SGpCLG1EQUFrRDtJQUFFc0IsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0csU0FBU1YsZUFBZTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzlIaEIsb0RBQW1EO0lBQUVzQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRyxTQUFTWCxnQkFBZ0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNoSWYsNERBQTJEO0lBQUVzQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRyxTQUFTWix3QkFBd0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNoSmQsdURBQXNEO0lBQUVzQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRyxTQUFTYixtQkFBbUI7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN0SSxnQkFBZ0I7QUFDaEJiLHVEQUFzRDtJQUFFc0IsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0csU0FBU2QsbUJBQW1CO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdEksSUFBSWUsWUFBWU4sbUJBQU9BLENBQUMsNkVBQVc7QUFDbkNyQix1REFBc0Q7SUFBRXNCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9JLFVBQVVoQixtQkFBbUI7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN2SVgsdURBQXNEO0lBQUVzQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSSxVQUFVakIsbUJBQW1CO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdklWLCtDQUE4QztJQUFFc0IsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0ksVUFBVWxCLFdBQVc7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN2SFQsa0RBQWlEO0lBQUVzQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSSxVQUFVbkIsY0FBYztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzdIUiw4Q0FBNkM7SUFBRXNCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9JLFVBQVVwQixVQUFVO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDckhQLDhDQUE2QztJQUFFc0IsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0ksVUFBVXJCLFVBQVU7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNySE4saURBQWdEO0lBQUVzQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSSxVQUFVdEIsYUFBYTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzNITCx3REFBdUQ7SUFBRXNCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9JLFVBQVV2QixvQkFBb0I7SUFBRTtBQUFFLENBQUMsRUFBQyxFQUN6SSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LXBlcnNvbmFsLXdlYi1hcHAvLi9ub2RlX21vZHVsZXMvQG5vdGlvbmhxL2NsaWVudC9idWlsZC9zcmMvaW5kZXguanM/YTg5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNGdWxsUGFnZU9yRGF0YWJhc2UgPSBleHBvcnRzLmlzRnVsbENvbW1lbnQgPSBleHBvcnRzLmlzRnVsbFVzZXIgPSBleHBvcnRzLmlzRnVsbFBhZ2UgPSBleHBvcnRzLmlzRnVsbERhdGFiYXNlID0gZXhwb3J0cy5pc0Z1bGxCbG9jayA9IGV4cG9ydHMuaXRlcmF0ZVBhZ2luYXRlZEFQSSA9IGV4cG9ydHMuY29sbGVjdFBhZ2luYXRlZEFQSSA9IGV4cG9ydHMuaXNOb3Rpb25DbGllbnRFcnJvciA9IGV4cG9ydHMuUmVxdWVzdFRpbWVvdXRFcnJvciA9IGV4cG9ydHMuVW5rbm93bkhUVFBSZXNwb25zZUVycm9yID0gZXhwb3J0cy5BUElSZXNwb25zZUVycm9yID0gZXhwb3J0cy5DbGllbnRFcnJvckNvZGUgPSBleHBvcnRzLkFQSUVycm9yQ29kZSA9IGV4cG9ydHMuTG9nTGV2ZWwgPSBleHBvcnRzLkNsaWVudCA9IHZvaWQgMDtcbnZhciBDbGllbnRfMSA9IHJlcXVpcmUoXCIuL0NsaWVudFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNsaWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQ2xpZW50XzEuZGVmYXVsdDsgfSB9KTtcbnZhciBsb2dnaW5nXzEgPSByZXF1aXJlKFwiLi9sb2dnaW5nXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTG9nTGV2ZWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxvZ2dpbmdfMS5Mb2dMZXZlbDsgfSB9KTtcbnZhciBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFQSUVycm9yQ29kZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXJyb3JzXzEuQVBJRXJyb3JDb2RlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2xpZW50RXJyb3JDb2RlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5DbGllbnRFcnJvckNvZGU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBUElSZXNwb25zZUVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5BUElSZXNwb25zZUVycm9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVW5rbm93bkhUVFBSZXNwb25zZUVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5Vbmtub3duSFRUUFJlc3BvbnNlRXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VGltZW91dEVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5SZXF1ZXN0VGltZW91dEVycm9yOyB9IH0pO1xuLy8gRXJyb3IgaGVscGVyc1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNOb3Rpb25DbGllbnRFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXJyb3JzXzEuaXNOb3Rpb25DbGllbnRFcnJvcjsgfSB9KTtcbnZhciBoZWxwZXJzXzEgPSByZXF1aXJlKFwiLi9oZWxwZXJzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29sbGVjdFBhZ2luYXRlZEFQSVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaGVscGVyc18xLmNvbGxlY3RQYWdpbmF0ZWRBUEk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpdGVyYXRlUGFnaW5hdGVkQVBJXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBoZWxwZXJzXzEuaXRlcmF0ZVBhZ2luYXRlZEFQSTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzRnVsbEJsb2NrXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBoZWxwZXJzXzEuaXNGdWxsQmxvY2s7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0Z1bGxEYXRhYmFzZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaGVscGVyc18xLmlzRnVsbERhdGFiYXNlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNGdWxsUGFnZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaGVscGVyc18xLmlzRnVsbFBhZ2U7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0Z1bGxVc2VyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBoZWxwZXJzXzEuaXNGdWxsVXNlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzRnVsbENvbW1lbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGhlbHBlcnNfMS5pc0Z1bGxDb21tZW50OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNGdWxsUGFnZU9yRGF0YWJhc2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGhlbHBlcnNfMS5pc0Z1bGxQYWdlT3JEYXRhYmFzZTsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzRnVsbFBhZ2VPckRhdGFiYXNlIiwiaXNGdWxsQ29tbWVudCIsImlzRnVsbFVzZXIiLCJpc0Z1bGxQYWdlIiwiaXNGdWxsRGF0YWJhc2UiLCJpc0Z1bGxCbG9jayIsIml0ZXJhdGVQYWdpbmF0ZWRBUEkiLCJjb2xsZWN0UGFnaW5hdGVkQVBJIiwiaXNOb3Rpb25DbGllbnRFcnJvciIsIlJlcXVlc3RUaW1lb3V0RXJyb3IiLCJVbmtub3duSFRUUFJlc3BvbnNlRXJyb3IiLCJBUElSZXNwb25zZUVycm9yIiwiQ2xpZW50RXJyb3JDb2RlIiwiQVBJRXJyb3JDb2RlIiwiTG9nTGV2ZWwiLCJDbGllbnQiLCJDbGllbnRfMSIsInJlcXVpcmUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZGVmYXVsdCIsImxvZ2dpbmdfMSIsImVycm9yc18xIiwiaGVscGVyc18xIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@notionhq/client/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@notionhq/client/build/src/logging.js":
/*!************************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/logging.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.logLevelSeverity = exports.makeConsoleLogger = exports.LogLevel = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@notionhq/client/build/src/utils.js\");\nvar LogLevel;\n(function(LogLevel) {\n    LogLevel[\"DEBUG\"] = \"debug\";\n    LogLevel[\"INFO\"] = \"info\";\n    LogLevel[\"WARN\"] = \"warn\";\n    LogLevel[\"ERROR\"] = \"error\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\nfunction makeConsoleLogger(name) {\n    return (level, message, extraInfo)=>{\n        console[level](`${name} ${level}:`, message, extraInfo);\n    };\n}\nexports.makeConsoleLogger = makeConsoleLogger;\n/**\n * Transforms a log level into a comparable (numerical) value ordered by severity.\n */ function logLevelSeverity(level) {\n    switch(level){\n        case LogLevel.DEBUG:\n            return 20;\n        case LogLevel.INFO:\n            return 40;\n        case LogLevel.WARN:\n            return 60;\n        case LogLevel.ERROR:\n            return 80;\n        default:\n            return (0, utils_1.assertNever)(level);\n    }\n}\nexports.logLevelSeverity = logLevelSeverity; //# sourceMappingURL=logging.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5vdGlvbmhxL2NsaWVudC9idWlsZC9zcmMvbG9nZ2luZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsd0JBQXdCLEdBQUdBLHlCQUF5QixHQUFHQSxnQkFBZ0IsR0FBRyxLQUFLO0FBQy9FLE1BQU1LLFVBQVVDLG1CQUFPQSxDQUFDLHlFQUFTO0FBQ2pDLElBQUlGO0FBQ0gsVUFBVUEsUUFBUTtJQUNmQSxRQUFRLENBQUMsUUFBUSxHQUFHO0lBQ3BCQSxRQUFRLENBQUMsT0FBTyxHQUFHO0lBQ25CQSxRQUFRLENBQUMsT0FBTyxHQUFHO0lBQ25CQSxRQUFRLENBQUMsUUFBUSxHQUFHO0FBQ3hCLEdBQUdBLFdBQVdKLFFBQVFJLFFBQVEsSUFBS0osQ0FBQUEsZ0JBQWdCLEdBQUcsQ0FBQztBQUN2RCxTQUFTRyxrQkFBa0JJLElBQUk7SUFDM0IsT0FBTyxDQUFDQyxPQUFPQyxTQUFTQztRQUNwQkMsT0FBTyxDQUFDSCxNQUFNLENBQUMsQ0FBQyxFQUFFRCxLQUFLLENBQUMsRUFBRUMsTUFBTSxDQUFDLENBQUMsRUFBRUMsU0FBU0M7SUFDakQ7QUFDSjtBQUNBVix5QkFBeUIsR0FBR0c7QUFDNUI7O0NBRUMsR0FDRCxTQUFTRCxpQkFBaUJNLEtBQUs7SUFDM0IsT0FBUUE7UUFDSixLQUFLSixTQUFTUSxLQUFLO1lBQ2YsT0FBTztRQUNYLEtBQUtSLFNBQVNTLElBQUk7WUFDZCxPQUFPO1FBQ1gsS0FBS1QsU0FBU1UsSUFBSTtZQUNkLE9BQU87UUFDWCxLQUFLVixTQUFTVyxLQUFLO1lBQ2YsT0FBTztRQUNYO1lBQ0ksT0FBTyxDQUFDLEdBQUdWLFFBQVFXLFdBQVcsRUFBRVI7SUFDeEM7QUFDSjtBQUNBUix3QkFBd0IsR0FBR0Usa0JBQzNCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtcGVyc29uYWwtd2ViLWFwcC8uL25vZGVfbW9kdWxlcy9Abm90aW9uaHEvY2xpZW50L2J1aWxkL3NyYy9sb2dnaW5nLmpzP2ZmZjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvZ0xldmVsU2V2ZXJpdHkgPSBleHBvcnRzLm1ha2VDb25zb2xlTG9nZ2VyID0gZXhwb3J0cy5Mb2dMZXZlbCA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbnZhciBMb2dMZXZlbDtcbihmdW5jdGlvbiAoTG9nTGV2ZWwpIHtcbiAgICBMb2dMZXZlbFtcIkRFQlVHXCJdID0gXCJkZWJ1Z1wiO1xuICAgIExvZ0xldmVsW1wiSU5GT1wiXSA9IFwiaW5mb1wiO1xuICAgIExvZ0xldmVsW1wiV0FSTlwiXSA9IFwid2FyblwiO1xuICAgIExvZ0xldmVsW1wiRVJST1JcIl0gPSBcImVycm9yXCI7XG59KShMb2dMZXZlbCA9IGV4cG9ydHMuTG9nTGV2ZWwgfHwgKGV4cG9ydHMuTG9nTGV2ZWwgPSB7fSkpO1xuZnVuY3Rpb24gbWFrZUNvbnNvbGVMb2dnZXIobmFtZSkge1xuICAgIHJldHVybiAobGV2ZWwsIG1lc3NhZ2UsIGV4dHJhSW5mbykgPT4ge1xuICAgICAgICBjb25zb2xlW2xldmVsXShgJHtuYW1lfSAke2xldmVsfTpgLCBtZXNzYWdlLCBleHRyYUluZm8pO1xuICAgIH07XG59XG5leHBvcnRzLm1ha2VDb25zb2xlTG9nZ2VyID0gbWFrZUNvbnNvbGVMb2dnZXI7XG4vKipcbiAqIFRyYW5zZm9ybXMgYSBsb2cgbGV2ZWwgaW50byBhIGNvbXBhcmFibGUgKG51bWVyaWNhbCkgdmFsdWUgb3JkZXJlZCBieSBzZXZlcml0eS5cbiAqL1xuZnVuY3Rpb24gbG9nTGV2ZWxTZXZlcml0eShsZXZlbCkge1xuICAgIHN3aXRjaCAobGV2ZWwpIHtcbiAgICAgICAgY2FzZSBMb2dMZXZlbC5ERUJVRzpcbiAgICAgICAgICAgIHJldHVybiAyMDtcbiAgICAgICAgY2FzZSBMb2dMZXZlbC5JTkZPOlxuICAgICAgICAgICAgcmV0dXJuIDQwO1xuICAgICAgICBjYXNlIExvZ0xldmVsLldBUk46XG4gICAgICAgICAgICByZXR1cm4gNjA7XG4gICAgICAgIGNhc2UgTG9nTGV2ZWwuRVJST1I6XG4gICAgICAgICAgICByZXR1cm4gODA7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuYXNzZXJ0TmV2ZXIpKGxldmVsKTtcbiAgICB9XG59XG5leHBvcnRzLmxvZ0xldmVsU2V2ZXJpdHkgPSBsb2dMZXZlbFNldmVyaXR5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2luZy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJsb2dMZXZlbFNldmVyaXR5IiwibWFrZUNvbnNvbGVMb2dnZXIiLCJMb2dMZXZlbCIsInV0aWxzXzEiLCJyZXF1aXJlIiwibmFtZSIsImxldmVsIiwibWVzc2FnZSIsImV4dHJhSW5mbyIsImNvbnNvbGUiLCJERUJVRyIsIklORk8iLCJXQVJOIiwiRVJST1IiLCJhc3NlcnROZXZlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@notionhq/client/build/src/logging.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@notionhq/client/build/src/utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/utils.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isObject = exports.pick = exports.assertNever = void 0;\n/**\n * Utility for enforcing exhaustiveness checks in the type system.\n *\n * @see https://basarat.gitbook.io/typescript/type-system/discriminated-unions#throw-in-exhaustive-checks\n *\n * @param value The variable with no remaining values\n */ function assertNever(value) {\n    throw new Error(`Unexpected value should never occur: ${value}`);\n}\nexports.assertNever = assertNever;\nfunction pick(base, keys) {\n    const entries = keys.map((key)=>[\n            key,\n            base === null || base === void 0 ? void 0 : base[key]\n        ]);\n    return Object.fromEntries(entries);\n}\nexports.pick = pick;\nfunction isObject(o) {\n    return typeof o === \"object\" && o !== null;\n}\nexports.isObject = isObject; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5vdGlvbmhxL2NsaWVudC9idWlsZC9zcmMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdCQUFnQixHQUFHQSxZQUFZLEdBQUdBLG1CQUFtQixHQUFHLEtBQUs7QUFDN0Q7Ozs7OztDQU1DLEdBQ0QsU0FBU0ksWUFBWUgsS0FBSztJQUN0QixNQUFNLElBQUlJLE1BQU0sQ0FBQyxxQ0FBcUMsRUFBRUosTUFBTSxDQUFDO0FBQ25FO0FBQ0FELG1CQUFtQixHQUFHSTtBQUN0QixTQUFTRCxLQUFLRyxJQUFJLEVBQUVDLElBQUk7SUFDcEIsTUFBTUMsVUFBVUQsS0FBS0UsR0FBRyxDQUFDQyxDQUFBQSxNQUFPO1lBQUNBO1lBQUtKLFNBQVMsUUFBUUEsU0FBUyxLQUFLLElBQUksS0FBSyxJQUFJQSxJQUFJLENBQUNJLElBQUk7U0FBQztJQUM1RixPQUFPWixPQUFPYSxXQUFXLENBQUNIO0FBQzlCO0FBQ0FSLFlBQVksR0FBR0c7QUFDZixTQUFTRCxTQUFTVSxDQUFDO0lBQ2YsT0FBTyxPQUFPQSxNQUFNLFlBQVlBLE1BQU07QUFDMUM7QUFDQVosZ0JBQWdCLEdBQUdFLFVBQ25CLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtcGVyc29uYWwtd2ViLWFwcC8uL25vZGVfbW9kdWxlcy9Abm90aW9uaHEvY2xpZW50L2J1aWxkL3NyYy91dGlscy5qcz9jN2ZlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc09iamVjdCA9IGV4cG9ydHMucGljayA9IGV4cG9ydHMuYXNzZXJ0TmV2ZXIgPSB2b2lkIDA7XG4vKipcbiAqIFV0aWxpdHkgZm9yIGVuZm9yY2luZyBleGhhdXN0aXZlbmVzcyBjaGVja3MgaW4gdGhlIHR5cGUgc3lzdGVtLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9iYXNhcmF0LmdpdGJvb2suaW8vdHlwZXNjcmlwdC90eXBlLXN5c3RlbS9kaXNjcmltaW5hdGVkLXVuaW9ucyN0aHJvdy1pbi1leGhhdXN0aXZlLWNoZWNrc1xuICpcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFyaWFibGUgd2l0aCBubyByZW1haW5pbmcgdmFsdWVzXG4gKi9cbmZ1bmN0aW9uIGFzc2VydE5ldmVyKHZhbHVlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIHZhbHVlIHNob3VsZCBuZXZlciBvY2N1cjogJHt2YWx1ZX1gKTtcbn1cbmV4cG9ydHMuYXNzZXJ0TmV2ZXIgPSBhc3NlcnROZXZlcjtcbmZ1bmN0aW9uIHBpY2soYmFzZSwga2V5cykge1xuICAgIGNvbnN0IGVudHJpZXMgPSBrZXlzLm1hcChrZXkgPT4gW2tleSwgYmFzZSA9PT0gbnVsbCB8fCBiYXNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBiYXNlW2tleV1dKTtcbiAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpO1xufVxuZXhwb3J0cy5waWNrID0gcGljaztcbmZ1bmN0aW9uIGlzT2JqZWN0KG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG8gPT09IFwib2JqZWN0XCIgJiYgbyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzT2JqZWN0IiwicGljayIsImFzc2VydE5ldmVyIiwiRXJyb3IiLCJiYXNlIiwia2V5cyIsImVudHJpZXMiLCJtYXAiLCJrZXkiLCJmcm9tRW50cmllcyIsIm8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@notionhq/client/build/src/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@notionhq/client/build/package.json":
/*!**********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/package.json ***!
  \**********************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"@notionhq/client","version":"2.2.15","description":"A simple and easy to use client for the Notion API","engines":{"node":">=12"},"homepage":"https://developers.notion.com/docs/getting-started","bugs":{"url":"https://github.com/makenotion/notion-sdk-js/issues"},"repository":{"type":"git","url":"https://github.com/makenotion/notion-sdk-js/"},"keywords":["notion","notionapi","rest","notion-api"],"main":"./build/src","types":"./build/src/index.d.ts","scripts":{"prepare":"npm run build","prepublishOnly":"npm run checkLoggedIn && npm run lint && npm run test","build":"tsc","prettier":"prettier --write .","lint":"prettier --check . && eslint . --ext .ts && cspell \'**/*\' ","test":"jest ./test","check-links":"git ls-files | grep md$ | xargs -n 1 markdown-link-check","prebuild":"npm run clean","clean":"rm -rf ./build","checkLoggedIn":"./scripts/verifyLoggedIn.sh"},"author":"","license":"MIT","files":["build/package.json","build/src/**"],"dependencies":{"@types/node-fetch":"^2.5.10","node-fetch":"^2.6.1"},"devDependencies":{"@types/jest":"^28.1.4","@typescript-eslint/eslint-plugin":"^5.39.0","@typescript-eslint/parser":"^5.39.0","cspell":"^5.4.1","eslint":"^7.24.0","jest":"^28.1.2","markdown-link-check":"^3.8.7","prettier":"^2.8.8","ts-jest":"^28.0.5","typescript":"^4.8.4"}}');

/***/ })

};
;